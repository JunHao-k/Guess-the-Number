{"version":3,"sources":["Game.js","App.js","reportWebVitals.js","index.js"],"names":["Game","state","inputNum","ans","displayResult","guessHist","count","componentDidMount","getRandnum","playerNum","event","a","setState","target","value","randomNumber","Math","floor","random","getResult","statement","saveGuesshist","list_clone","push","playGame","initGame","this","class","list","b","length","id","type","placeholder","onChange","onClick","showMessage","showList","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAgKeA,E,4MAhJXC,MAAQ,CACJC,SAAU,GACVC,IAAK,EACLC,cAAe,GACfC,UAAW,GACXC,MAAO,G,EAGXC,kBAAoB,WAChB,EAAKC,c,EAKTC,U,uCAAY,WAAOC,GAAP,SAAAC,EAAA,sEACF,EAAKC,SAAS,CAChBV,SAAUQ,EAAMG,OAAOC,QAFnB,2C,wDAMZN,WAAa,WACT,IAAIO,EAAeC,KAAKC,MAAoB,IAAdD,KAAKE,UAAgB,EACnD,EAAKN,SAAS,CACVT,IAAKY,K,EAIbI,UAAY,WACR,IAAIC,EAAY,GAEZA,EADD,EAAKnB,MAAMC,SAAW,EAAKD,MAAME,IACpB,0BAER,EAAKF,MAAMC,SAAW,EAAKD,MAAME,IACzB,yBAGA,2BAEhB,EAAKS,SAAS,CACVR,cAAegB,K,EAKvBC,cAAgB,WACZ,IAAIC,EAAa,IACjBA,EAAU,YAAO,EAAKrB,MAAMI,YACjBkB,KAAK,eAAiB,EAAKtB,MAAMC,UAE5C,EAAKU,SAAS,CACVP,UAAWiB,EACXhB,MAAO,EAAKL,MAAMK,W,EAI1BkB,SAAW,WACP,EAAKL,YACL,EAAKE,iB,EAGTI,SAAW,WACP,EAAKjB,aACL,EAAKI,SAAS,CACVP,UAAW,GACXH,SAAU,EACVE,cAAe,M,4DAMnB,MAAkC,4BAA7BsB,KAAKzB,MAAMG,eAA8E,2BAA7BsB,KAAKzB,MAAMG,cACjE,qBAAKuB,MAAM,SAAX,SAAqBD,KAAKzB,MAAMG,gBAEL,6BAA7BsB,KAAKzB,MAAMG,cACX,qBAAKuB,MAAM,gBAAX,SAA4BD,KAAKzB,MAAMG,gBAGrC,O,iCAOX,IAFA,IAAIwB,EAAO,GAEHC,EAAIH,KAAKzB,MAAMI,UAAUyB,OAAS,EAAGD,GAAK,EAAGA,IACjDD,EAAKL,KACD,qBAAKQ,GAAK,YAAV,SACI,oBAAIA,GAAK,YAAT,SACI,6BAAKL,KAAKzB,MAAMI,UAAUwB,UAK9C,OAAOD,I,+BAOH,OACI,sBAAKD,MAAQ,OAAb,UACI,qBAAIA,MAAQ,SAAZ,UACI,0CACA,uBACA,6DACA,0BAIJ,uBAAOK,KAAO,SAASD,GAAK,UAAUjB,MAASY,KAAKzB,MAAMC,SAAU+B,YAAc,qBAAqBC,SAAYR,KAAKjB,YACxH,uBAEA,sBAAKkB,MAAQ,UAAb,UACI,uBACA,wBAAQI,GAAK,QAAQI,QAAWT,KAAKF,SAArC,wBACA,wBAAQO,GAAK,UAAUI,QAAWT,KAAKD,SAAvC,0BAGJ,uBAECC,KAAKU,cAGN,uBAECV,KAAKW,kB,GAhIHC,IAAMC,WCSVC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCPSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dce6a86e.chunk.js","sourcesContent":["/**\r\n * Guess The Number Game\r\n * DONE: Get user value from input and save it to variable numberGuess\r\n * DONE: Generate a random number 1 to 100 and save it to variable correctNumber\r\n * DONE: Console whether the guess is too high, too low, or is correct inside playGame function\r\n * DONE: Create a function called displayResult to move the logic for if the guess is too high, too low, or correct\r\n * DONE: Complete the showYouWon, showNumberAbove, showNumberBelow\r\n * DONE: Use the showYouWon... functions within displayResult to display the correct dialog\r\n * DONE: Save the guess history in a variable called guess\r\n * DONE: Display the guess history using displayHistory() function\r\n * TODO: Use the initGame() function to restart the game\r\n */\r\n\r\nimport React from 'react'\r\n\r\nclass Game extends React.Component{\r\n    state = {\r\n        inputNum: '',\r\n        ans: 0,\r\n        displayResult: '',\r\n        guessHist: [],\r\n        count: 0\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        this.getRandnum();\r\n    }\r\n\r\n\r\n\r\n    playerNum = async (event) => {\r\n        await this.setState({\r\n            inputNum: event.target.value\r\n        })\r\n    }\r\n\r\n    getRandnum = () => {\r\n        let randomNumber = Math.floor(Math.random()*100) + 1\r\n        this.setState({\r\n            ans: randomNumber\r\n        })\r\n    }\r\n\r\n    getResult = () => {\r\n        let statement = '';\r\n        if(this.state.inputNum > this.state.ans){\r\n            statement = \"Your guess is too high!\"\r\n        }\r\n        else if(this.state.inputNum < this.state.ans){\r\n            statement = \"Your guess is too low!\"\r\n        }\r\n        else{\r\n            statement = \"Awesome job, you got it!\"\r\n        }\r\n        this.setState({\r\n            displayResult: statement,  \r\n        })\r\n\r\n    }\r\n\r\n    saveGuesshist = () => {\r\n        let list_clone = [];\r\n        list_clone = [...this.state.guessHist]\r\n        list_clone.push('You guessed ' + this.state.inputNum);\r\n\r\n        this.setState({\r\n            guessHist: list_clone,\r\n            count: this.state.count++\r\n        })\r\n    }\r\n\r\n    playGame = () => {\r\n        this.getResult();\r\n        this.saveGuesshist();\r\n    }\r\n\r\n    initGame = () => {\r\n        this.getRandnum();\r\n        this.setState({\r\n            guessHist: [],\r\n            inputNum: 0,\r\n            displayResult: ''\r\n        })\r\n\r\n    }\r\n\r\n    showMessage() {\r\n        if ((this.state.displayResult === \"Your guess is too high!\") || (this.state.displayResult === \"Your guess is too low!\")) {\r\n            return <div class=\"result\">{this.state.displayResult}</div>;\r\n        } \r\n        else if((this.state.displayResult === \"Awesome job, you got it!\")){\r\n          return <div class=\"resultCorrect\">{this.state.displayResult}</div>;\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n      }\r\n    \r\n    showList() {\r\n        let list = [];\r\n        \r\n        for(let b = this.state.guessHist.length - 1; b >= 0; b--){\r\n            list.push(\r\n                <div id = 'guessHist'>\r\n                    <ul id = 'guessList'>\r\n                        <li>{this.state.guessHist[b]}</li>\r\n                    </ul>\r\n                </div> \r\n            )\r\n        }\r\n    return list\r\n    }\r\n\r\n    //this.state.message ? (\r\n    //   <div class=\"alert\">{this.state.message}</div>\r\n    //   ) : null\r\n    render(){\r\n        return(\r\n            <div class = 'main'>\r\n                <h1 class = 'banner'>\r\n                    <label>1.2.3</label>\r\n                    <br/>\r\n                    <label>終極密碼</label>\r\n                    <br/>\r\n                    \r\n                </h1>\r\n                \r\n                <input type = 'number' id = 'textbox' value = {this.state.inputNum} placeholder = 'What is you guess?' onChange = {this.playerNum}/>\r\n                <br/>\r\n                \r\n                <div class = 'buttons'>\r\n                    <br/>\r\n                    <button id = 'check' onClick = {this.playGame}> Check Me </button>\r\n                    <button id = 'restart' onClick = {this.initGame}> Restart </button>\r\n                </div>\r\n\r\n                <br/>\r\n                \r\n                {this.showMessage()}\r\n               \r\n                \r\n                <br/>\r\n               \r\n                {this.showList()}\r\n               {/*<div id = 'guessHist'>\r\n                    <ul id = 'guessList'>\r\n                        <li>\r\n                            {this.state.guessHist[1]}\r\n                        </li>\r\n                    </ul>\r\n                </div>*/}\r\n\r\n                \r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","/**\n * Guess The Number Game\n * DONE: Get user value from input and save it to variable numberGuess\n * DONE: Generate a random number 1 to 100 and save it to variable correctNumber\n * DONE: Console whether the guess is too high, too low, or is correct inside playGame function\n * DONE: Create a function called displayResult to move the logic for if the guess is too high, too low, or correct\n * DONE: Complete the showYouWon, showNumberAbove, showNumberBelow\n * DONE: Use the showYouWon... functions within displayResult to display the correct dialog\n * DONE: Save the guess history in a variable called guess\n * DONE: Display the guess history using displayHistory() function\n * TODO: Use the initGame() function to restart the game\n */\nimport './App.css';\nimport React from 'react'\nimport Game from './Game.js'\n\nfunction App() {\n  return (\n    <div>\n      <Game/>\n    </div>\n  );\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}